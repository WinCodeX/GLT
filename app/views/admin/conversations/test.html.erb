<!-- app/views/admin/conversations/test.html.erb -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Test ActionCable - GLT Logistics Admin</title>
  
  <!-- Favicon Links -->
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  
  <!-- Theme Color -->
  <meta name="theme-color" content="#8b5cf6">
  <meta name="msapplication-TileColor" content="#8b5cf6">
  
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      background: #0a0a0f;
      color: #e4e4e7;
      min-height: 100vh;
    }
    
    .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
    
    .header {
      background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
      color: white;
      padding: 30px;
      border-radius: 20px;
      margin-bottom: 30px;
      box-shadow: 0 8px 32px rgba(139, 92, 246, 0.3);
    }
    
    .header h1 { font-size: 2rem; margin-bottom: 10px; font-weight: 700; }
    .header p { opacity: 0.9; margin-bottom: 20px; }
    
    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s;
      text-decoration: none;
      display: inline-block;
    }
    
    .btn-primary {
      background: rgba(255, 255, 255, 0.2);
      color: white;
      border: 2px solid rgba(255, 255, 255, 0.3);
    }
    
    .btn-primary:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: translateY(-2px);
    }
    
    .btn-success {
      background: linear-gradient(135deg, #10b981 0%, #059669 100%);
      color: white;
    }
    
    .btn-success:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(16, 185, 129, 0.3);
    }
    
    .connection-status {
      background: rgba(245, 158, 11, 0.2);
      border: 2px solid rgba(245, 158, 11, 0.4);
      padding: 15px;
      border-radius: 15px;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .connection-status.connected {
      background: rgba(16, 185, 129, 0.2);
      border-color: rgba(16, 185, 129, 0.4);
    }
    
    .status-indicator {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      animation: pulse 2s infinite;
    }
    
    .status-connected { background: #10b981; box-shadow: 0 0 10px #10b981; }
    .status-disconnected { background: #ef4444; box-shadow: 0 0 10px #ef4444; }
    
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    
    .test-layout {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
    }
    
    .section {
      background: rgba(10, 10, 15, 0.8);
      border: 1px solid rgba(139, 92, 246, 0.2);
      padding: 30px;
      border-radius: 20px;
      backdrop-filter: blur(20px);
    }
    
    .section h2 {
      margin-bottom: 20px;
      color: #f4f4f5;
      font-size: 1.3rem;
      font-weight: 700;
    }
    
    .conversation-select {
      width: 100%;
      padding: 12px;
      border: 2px solid rgba(139, 92, 246, 0.3);
      border-radius: 12px;
      background: rgba(10, 10, 15, 0.9);
      color: #e4e4e7;
      margin-bottom: 20px;
      font-size: 14px;
    }
    
    .conversation-select:focus {
      outline: none;
      border-color: #8b5cf6;
      box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
    }
    
    .message-form {
      width: 100%;
      padding: 12px;
      border: 2px solid rgba(139, 92, 246, 0.3);
      border-radius: 12px;
      background: rgba(10, 10, 15, 0.9);
      color: #e4e4e7;
      margin-bottom: 15px;
      min-height: 100px;
      resize: vertical;
      font-family: inherit;
      font-size: 14px;
    }
    
    .message-form:focus {
      outline: none;
      border-color: #8b5cf6;
      box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
    }
    
    .messages-container {
      border: 2px solid rgba(139, 92, 246, 0.2);
      border-radius: 15px;
      padding: 20px;
      min-height: 400px;
      max-height: 500px;
      overflow-y: auto;
      background: rgba(139, 92, 246, 0.05);
    }
    
    .message {
      padding: 15px;
      margin-bottom: 12px;
      border-radius: 12px;
      background: rgba(139, 92, 246, 0.1);
      border-left: 3px solid #8b5cf6;
    }
    
    .message.new {
      animation: slideIn 0.3s ease-out;
      border-left-color: #10b981;
      background: rgba(16, 185, 129, 0.1);
    }
    
    @keyframes slideIn {
      from { opacity: 0; transform: translateX(-20px); }
      to { opacity: 1; transform: translateX(0); }
    }
    
    .message-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
      font-size: 0.85rem;
      color: #a1a1aa;
    }
    
    .message-content {
      color: #e4e4e7;
      line-height: 1.5;
    }
    
    .log-container {
      background: #1e1e1e;
      color: #e4e4e7;
      padding: 20px;
      border-radius: 15px;
      font-family: 'Courier New', monospace;
      font-size: 0.85rem;
      min-height: 200px;
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid rgba(139, 92, 246, 0.2);
    }
    
    .log-entry {
      margin-bottom: 5px;
      padding: 4px 0;
    }
    
    .log-entry.info { color: #60a5fa; }
    .log-entry.success { color: #34d399; }
    .log-entry.error { color: #f87171; }
    
    label {
      display: block;
      margin-bottom: 8px;
      color: #a1a1aa;
      font-weight: 600;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    
    .instructions {
      background: rgba(139, 92, 246, 0.1);
      border: 1px solid rgba(139, 92, 246, 0.3);
      border-radius: 12px;
      padding: 20px;
      margin-top: 30px;
    }
    
    .instructions h3 {
      color: #a78bfa;
      margin-bottom: 15px;
    }
    
    .instructions ol {
      margin-left: 20px;
      line-height: 1.8;
      color: #e4e4e7;
    }
    
    .empty-message {
      text-align: center;
      color: #a1a1aa;
      padding: 40px 20px;
      font-size: 0.9rem;
    }
    
    @media (max-width: 968px) {
      .test-layout {
        grid-template-columns: 1fr;
      }
    }
  </style>
  <script>
    let cable;
    let currentConversationId;
    
    document.addEventListener('DOMContentLoaded', function() {
      initializeActionCable();
    });
    
    function initializeActionCable() {
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const wsUrl = `${protocol}//${window.location.host}/cable`;
      
      log('Initializing ActionCable...', 'info');
      log(`WebSocket URL: ${wsUrl}`, 'info');
      log('üåê Connecting via web session (no token required)', 'info');
      
      cable = new WebSocket(wsUrl);
      
      cable.onopen = function() {
        log('‚úÖ WebSocket connected!', 'success');
        updateConnectionStatus(true);
      };
      
      cable.onmessage = function(event) {
        const data = JSON.parse(event.data);
        log(`üì® Received: ${JSON.stringify(data)}`, 'info');
        
        if (data.type === 'welcome') {
          log('üëã Welcome message received', 'success');
        } else if (data.type === 'disconnect') {
          log(`‚ö†Ô∏è Disconnected: ${data.reason}`, 'error');
        } else if (data.message && data.message.type === 'new_message') {
          handleNewMessage(data.message);
        }
      };
      
      cable.onerror = function(error) {
        log('‚ùå WebSocket error: ' + error, 'error');
        updateConnectionStatus(false);
      };
      
      cable.onclose = function() {
        log('üîå WebSocket disconnected', 'error');
        updateConnectionStatus(false);
      };
    }
    
    function subscribeToConversation(conversationId) {
      if (!cable || cable.readyState !== WebSocket.OPEN) {
        log('‚ùå Cannot subscribe - WebSocket not connected', 'error');
        return;
      }
      
      currentConversationId = conversationId;
      
      const subscribeCommand = {
        command: 'subscribe',
        identifier: JSON.stringify({
          channel: 'ConversationChannel',
          conversation_id: conversationId
        })
      };
      
      cable.send(JSON.stringify(subscribeCommand));
      log(`üì° Subscribed to conversation ${conversationId}`, 'success');
    }
    
    function handleNewMessage(messageData) {
      log('‚ú® New message received via ActionCable', 'success');
      
      const messagesContainer = document.getElementById('messages-container');
      const messageDiv = document.createElement('div');
      messageDiv.className = 'message new';
      messageDiv.innerHTML = `
        <div class="message-header">
          <span><strong>${messageData.message.user.name}</strong></span>
          <span>${new Date(messageData.message.created_at).toLocaleTimeString()}</span>
        </div>
        <div class="message-content">${messageData.message.content}</div>
      `;
      
      messagesContainer.appendChild(messageDiv);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    function log(message, type = 'info') {
      const logContainer = document.getElementById('log-container');
      const timestamp = new Date().toLocaleTimeString();
      const entry = document.createElement('div');
      entry.className = `log-entry ${type}`;
      entry.textContent = `[${timestamp}] ${message}`;
      logContainer.appendChild(entry);
      logContainer.scrollTop = logContainer.scrollHeight;
    }
    
    function updateConnectionStatus(connected) {
      const statusEl = document.getElementById('connection-status');
      const indicatorEl = document.getElementById('connection-indicator');
      
      if (connected) {
        statusEl.className = 'connection-status connected';
        statusEl.innerHTML = '<span class="status-indicator status-connected" id="connection-indicator"></span>‚úÖ ActionCable Connected';
      } else {
        statusEl.className = 'connection-status';
        statusEl.innerHTML = '<span class="status-indicator status-disconnected" id="connection-indicator"></span>‚ùå ActionCable Disconnected';
      }
    }
    
    function selectConversation() {
      const select = document.getElementById('conversation-select');
      const conversationId = select.value;
      
      if (conversationId) {
        subscribeToConversation(conversationId);
        document.getElementById('messages-container').innerHTML = '<div class="empty-message">Listening for messages...</div>';
        log(`Switched to conversation ${conversationId}`, 'info');
      }
    }
    
    function sendTestMessage(event) {
      event.preventDefault();
      
      const conversationId = document.getElementById('conversation-select').value;
      const content = document.getElementById('message-content').value;
      
      if (!conversationId || !content) {
        log('‚ùå Please select a conversation and enter a message', 'error');
        return;
      }
      
      event.target.submit();
    }
  </script>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üß™ Test ActionCable Messaging</h1>
      <p>Send test messages and monitor real-time updates</p>
      <a href="<%= admin_root_path %>" class="btn btn-primary" style="margin-top: 15px;">‚Üê Back to Admin</a>
    </div>

    <div id="connection-status" class="connection-status">
      <span id="connection-indicator" class="status-indicator status-disconnected"></span>
      Connecting to ActionCable...
    </div>

    <div class="test-layout">
      <div class="section">
        <h2>üì§ Send Test Message</h2>
        
        <%= form_with url: test_message_admin_conversations_path, method: :post, local: true, onsubmit: 'sendTestMessage(event)' do |f| %>
          <label>Select Conversation:</label>
          <%= select_tag :conversation_id, 
              options_for_select(@conversations.map { |c| [c.title || "Conversation ##{c.id}", c.id] }), 
              { class: 'conversation-select', id: 'conversation-select', onchange: 'selectConversation()' } %>
          
          <label>Message:</label>
          <%= text_area_tag :content, '', 
              placeholder: 'Type your test message here...', 
              class: 'message-form', 
              id: 'message-content' %>
          
          <%= submit_tag 'Send Message', class: 'btn btn-success' %>
        <% end %>
        
        <div class="instructions">
          <h3>üìã Instructions:</h3>
          <ol>
            <li>Select a conversation from the dropdown</li>
            <li>Type a test message</li>
            <li>Click "Send Message"</li>
            <li>Watch the message appear in real-time on the right ‚Üí</li>
          </ol>
        </div>
      </div>

      <div class="section">
        <h2>üì® Live Messages</h2>
        <div id="messages-container" class="messages-container">
          <div class="empty-message">
            Select a conversation and send a message to see it appear here in real-time
          </div>
        </div>
      </div>
    </div>

    <div class="section" style="margin-top: 20px;">
      <h2>üìù Connection Logs</h2>
      <div id="log-container" class="log-container">
        <div class="log-entry">Starting connection...</div>
      </div>
    </div>
  </div>
</body>
</html>