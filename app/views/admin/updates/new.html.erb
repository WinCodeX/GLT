<!-- app/views/admin/updates/new.html.erb -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create New Update - Admin Portal</title>
    <meta name="csrf-token" content="<%= form_authenticity_token %>">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
            color: white;
            padding: 30px;
            text-align: center;
            position: relative;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .header-actions {
            position: absolute;
            top: 20px;
            right: 30px;
            display: flex;
            gap: 10px;
        }

        .btn-header {
            background: rgba(255,255,255,0.2);
            color: white;
            border: 1px solid rgba(255,255,255,0.3);
            padding: 8px 16px;
            border-radius: 6px;
            text-decoration: none;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .btn-header:hover {
            background: rgba(255,255,255,0.3);
            border-color: rgba(255,255,255,0.5);
        }

        .content {
            padding: 40px;
        }

        .form-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .form-section {
            background: #f8fafc;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            border: 2px solid #e2e8f0;
        }

        .form-section h3 {
            color: #1f2937;
            font-size: 1.3rem;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-icon {
            width: 30px;
            height: 30px;
            background: #8B5CF6;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            color: white;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #374151;
            font-weight: 600;
            font-size: 14px;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

        .form-control:focus {
            outline: none;
            border-color: #8B5CF6;
            box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
        }

        .form-control.error {
            border-color: #ef4444;
        }

        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
        }

        .changelog-container {
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            background: white;
        }

        .changelog-header {
            padding: 15px 20px;
            background: #f8fafc;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .changelog-items {
            padding: 20px;
        }

        .changelog-item {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            align-items: center;
        }

        .changelog-item input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
        }

        .btn-small {
            padding: 8px 12px;
            font-size: 12px;
            border-radius: 6px;
            cursor: pointer;
            border: none;
            transition: all 0.3s ease;
        }

        .btn-add {
            background: #10b981;
            color: white;
        }

        .btn-remove {
            background: #ef4444;
            color: white;
        }

        .btn-add:hover, .btn-remove:hover {
            transform: translateY(-1px);
        }

        .file-upload-area {
            border: 3px dashed #d1d5db;
            border-radius: 12px;
            padding: 40px;
            text-align: center;
            background: white;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .file-upload-area:hover {
            border-color: #8B5CF6;
            background: #f3f4f6;
        }

        .file-upload-area.dragover {
            border-color: #8B5CF6;
            background: rgba(139, 92, 246, 0.1);
        }

        .file-upload-icon {
            font-size: 3rem;
            color: #9ca3af;
            margin-bottom: 15px;
        }

        .file-upload-text {
            color: #6b7280;
            margin-bottom: 10px;
        }

        .file-upload-subtext {
            font-size: 0.9rem;
            color: #9ca3af;
        }

        .file-selected {
            background: rgba(16, 185, 129, 0.1);
            border-color: #10b981;
            color: #065f46;
        }

        .upload-progress {
            margin-top: 20px;
            display: none;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e5e7eb;
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #8B5CF6, #10b981);
            transition: width 0.3s ease;
        }

        .progress-text {
            text-align: center;
            margin-top: 10px;
            font-size: 0.9rem;
            color: #6b7280;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }

        .checkbox-group input[type="checkbox"] {
            width: 18px;
            height: 18px;
            accent-color: #8B5CF6;
        }

        .checkbox-group label {
            margin: 0;
            font-weight: 500;
            cursor: pointer;
        }

        .form-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 40px;
            padding-top: 30px;
            border-top: 1px solid #e5e7eb;
        }

        .btn {
            padding: 14px 28px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
            color: white;
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

        .btn:disabled {
            background: #9ca3af;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .error-message {
            color: #ef4444;
            font-size: 0.9rem;
            margin-top: 5px;
        }

        .help-text {
            font-size: 0.9rem;
            color: #6b7280;
            margin-top: 5px;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #8B5CF6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            background: #10b981;
        }

        .toast.error {
            background: #ef4444;
        }

        .validation-summary {
            background: #fef2f2;
            border: 1px solid #fecaca;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            display: none;
        }

        .validation-summary.show {
            display: block;
        }

        .validation-summary h4 {
            color: #dc2626;
            margin-bottom: 10px;
            font-size: 1rem;
        }

        .validation-summary ul {
            margin: 0;
            padding-left: 20px;
        }

        .validation-summary li {
            color: #dc2626;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Create New Update</h1>
            <p>Deploy new features and fixes to your app users</p>
            <div class="header-actions">
                <a href="<%= admin_updates_path %>" class="btn-header">← Back to Updates</a>
                <a href="/admin" class="btn-header">Admin Home</a>
            </div>
        </div>

        <div class="content">
            <div class="form-container">
                <!-- Validation Summary -->
                <div id="validationSummary" class="validation-summary">
                    <h4>Please fix the following errors:</h4>
                    <ul id="validationList"></ul>
                </div>

                <%= form_with model: [:admin, @update], local: true, multipart: true, id: 'updateForm', class: 'update-form' do |form| %>
                    
                    <!-- Version Information -->
                    <div class="form-section">
                        <h3>
                            <span class="section-icon">🏷️</span>
                            Version Information
                        </h3>
                        
                        <div class="form-grid">
                            <div class="form-group">
                                <%= form.label :version, "Version Number" %>
                                <%= form.text_field :version, class: 'form-control', placeholder: '1.3.8', required: true %>
                                <div class="help-text">Semantic version (e.g., 1.3.8, 2.0.0)</div>
                                <div class="error-message" id="version-error"></div>
                            </div>
                            
                            <div class="form-group">
                                <%= form.label :runtime_version, "Runtime Version" %>
                                <%= form.text_field :runtime_version, class: 'form-control', value: '1.0.0' %>
                                <div class="help-text">Expo runtime version for compatibility</div>
                            </div>
                        </div>

                        <div class="form-group">
                            <%= form.label :description, "Description" %>
                            <%= form.text_area :description, class: 'form-control', rows: 3, placeholder: 'Brief description of this update...' %>
                            <div class="help-text">Optional: Describe the main changes in this update</div>
                        </div>
                    </div>

                    <!-- Changelog -->
                    <div class="form-section">
                        <h3>
                            <span class="section-icon">📝</span>
                            Changelog
                        </h3>
                        
                        <div class="changelog-container">
                            <div class="changelog-header">
                                <span>What's new in this version?</span>
                                <button type="button" class="btn-small btn-add" onclick="addChangelogItem()">
                                    + Add Item
                                </button>
                            </div>
                            <div class="changelog-items" id="changelogItems">
                                <div class="changelog-item">
                                    <input type="text" name="app_update[changelog][]" placeholder="Enter changelog item..." class="changelog-input">
                                    <button type="button" class="btn-small btn-remove" onclick="removeChangelogItem(this)">
                                        Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="help-text">Add bullet points for what's new, fixed, or improved</div>
                    </div>

                    <!-- Bundle Upload -->
                    <div class="form-section">
                        <h3>
                            <span class="section-icon">📦</span>
                            Bundle File
                        </h3>
                        
                        <div class="file-upload-area" id="fileUploadArea">
                            <div class="file-upload-icon">📁</div>
                            <div class="file-upload-text">
                                <strong>Choose a bundle file</strong> or drag and drop here
                            </div>
                            <div class="file-upload-subtext">
                                JavaScript bundle files (.js) only. Max size: 50MB
                            </div>
                            <%= form.file_field :bundle, style: 'display: none;', id: 'bundleFile', accept: '.js,.bundle' %>
                        </div>
                        
                        <div class="upload-progress" id="uploadProgress">
                            <div class="progress-bar">
                                <div class="progress-fill" id="progressFill"></div>
                            </div>
                            <div class="progress-text" id="progressText">Uploading...</div>
                        </div>

                        <div class="help-text">Upload the compiled JavaScript bundle from your Expo build</div>
                        <div class="error-message" id="bundle-error"></div>
                    </div>

                    <!-- Options -->
                    <div class="form-section">
                        <h3>
                            <span class="section-icon">⚙️</span>
                            Update Options
                        </h3>
                        
                        <div class="checkbox-group">
                            <%= form.check_box :force_update, id: 'forceUpdate' %>
                            <%= form.label :force_update, "Force Update (users must install)" %>
                        </div>
                        <div class="help-text">Force updates require users to install before using the app</div>
                        
                        <div class="checkbox-group">
                            <%= form.check_box :published, id: 'publishImmediately' %>
                            <%= form.label :published, "Publish immediately after creation" %>
                        </div>
                        <div class="help-text">Publish now or save as draft for later</div>
                    </div>

                    <!-- Form Actions -->
                    <div class="form-actions">
                        <a href="<%= admin_updates_path %>" class="btn btn-secondary">
                            Cancel
                        </a>
                        <button type="submit" class="btn btn-primary" id="submitBtn">
                            <span id="submitText">Create Update</span>
                            <span id="submitLoading" style="display: none;">
                                <span class="loading"></span> Creating...
                            </span>
                        </button>
                    </div>

                <% end %>
            </div>
        </div>
    </div>

    <script>
        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

        class UpdateCreator {
            constructor() {
                this.initializeFileUpload();
                this.initializeForm();
                this.initializeValidation();
            }

            initializeFileUpload() {
                const uploadArea = document.getElementById('fileUploadArea');
                const fileInput = document.getElementById('bundleFile');

                // Click to select file
                uploadArea.addEventListener('click', () => {
                    fileInput.click();
                });

                // File selected
                fileInput.addEventListener('change', (e) => {
                    this.handleFileSelect(e.target.files[0]);
                });

                // Drag and drop
                uploadArea.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    uploadArea.classList.add('dragover');
                });

                uploadArea.addEventListener('dragleave', () => {
                    uploadArea.classList.remove('dragover');
                });

                uploadArea.addEventListener('drop', (e) => {
                    e.preventDefault();
                    uploadArea.classList.remove('dragover');
                    
                    const files = e.dataTransfer.files;
                    if (files.length > 0) {
                        this.handleFileSelect(files[0]);
                        fileInput.files = files;
                    }
                });
            }

            handleFileSelect(file) {
                const uploadArea = document.getElementById('fileUploadArea');
                const errorDiv = document.getElementById('bundle-error');
                
                // Clear previous errors
                errorDiv.textContent = '';
                uploadArea.classList.remove('file-selected');

                if (!file) return;

                // Validate file type
                const validTypes = ['.js', '.bundle'];
                const isValidType = validTypes.some(type => file.name.toLowerCase().endsWith(type));
                
                if (!isValidType) {
                    errorDiv.textContent = 'Invalid file type. Only JavaScript files (.js) are allowed.';
                    return;
                }

                // Validate file size (50MB max)
                const maxSize = 50 * 1024 * 1024; // 50MB in bytes
                if (file.size > maxSize) {
                    errorDiv.textContent = 'File too large. Maximum size is 50MB.';
                    return;
                }

                // Show file selected
                uploadArea.classList.add('file-selected');
                uploadArea.innerHTML = `
                    <div class="file-upload-icon">✅</div>
                    <div class="file-upload-text">
                        <strong>${file.name}</strong> selected
                    </div>
                    <div class="file-upload-subtext">
                        ${this.formatFileSize(file.size)} • Ready to upload
                    </div>
                `;
            }

            formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            initializeForm() {
                const form = document.getElementById('updateForm');
                form.addEventListener('submit', (e) => this.handleSubmit(e));
            }

            initializeValidation() {
                const versionInput = document.querySelector('[name="app_update[version]"]');
                versionInput.addEventListener('blur', () => this.validateVersion());
            }

            validateVersion() {
                const versionInput = document.querySelector('[name="app_update[version]"]');
                const errorDiv = document.getElementById('version-error');
                const version = versionInput.value.trim();

                // Clear previous errors
                errorDiv.textContent = '';
                versionInput.classList.remove('error');

                if (!version) {
                    this.showFieldError(versionInput, 'Version is required');
                    return false;
                }

                // Validate semantic version format
                const semverRegex = /^\d+\.\d+\.\d+$/;
                if (!semverRegex.test(version)) {
                    this.showFieldError(versionInput, 'Version must be in semantic format (e.g., 1.3.8)');
                    return false;
                }

                return true;
            }

            showFieldError(input, message) {
                input.classList.add('error');
                const errorId = input.name.split('[')[1].split(']')[0] + '-error';
                const errorDiv = document.getElementById(errorId);
                if (errorDiv) {
                    errorDiv.textContent = message;
                }
            }

            validateForm() {
                const errors = [];
                
                // Validate version
                if (!this.validateVersion()) {
                    errors.push('Invalid version format');
                }

                // Validate changelog has at least one item
                const changelogInputs = document.querySelectorAll('.changelog-input');
                const hasChangelogItems = Array.from(changelogInputs).some(input => input.value.trim());
                
                if (!hasChangelogItems) {
                    errors.push('At least one changelog item is required');
                }

                // Show validation summary
                this.showValidationSummary(errors);
                
                return errors.length === 0;
            }

            showValidationSummary(errors) {
                const summary = document.getElementById('validationSummary');
                const list = document.getElementById('validationList');
                
                if (errors.length > 0) {
                    list.innerHTML = errors.map(error => `<li>${error}</li>`).join('');
                    summary.classList.add('show');
                    summary.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                } else {
                    summary.classList.remove('show');
                }
            }

            async handleSubmit(e) {
                e.preventDefault();

                // Validate form
                if (!this.validateForm()) {
                    return;
                }

                // Show loading state
                this.setSubmitLoading(true);

                try {
                    // Submit form normally for file upload
                    e.target.submit();
                } catch (error) {
                    this.showToast('Failed to create update: ' + error.message, 'error');
                    this.setSubmitLoading(false);
                }
            }

            setSubmitLoading(loading) {
                const submitBtn = document.getElementById('submitBtn');
                const submitText = document.getElementById('submitText');
                const submitLoading = document.getElementById('submitLoading');

                if (loading) {
                    submitText.style.display = 'none';
                    submitLoading.style.display = 'flex';
                    submitBtn.disabled = true;
                } else {
                    submitText.style.display = 'block';
                    submitLoading.style.display = 'none';
                    submitBtn.disabled = false;
                }
            }

            showToast(message, type = 'success') {
                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                toast.textContent = message;
                document.body.appendChild(toast);

                setTimeout(() => toast.classList.add('show'), 100);
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }, 4000);
            }
        }

        // Changelog management functions
        function addChangelogItem() {
            const container = document.getElementById('changelogItems');
            const newItem = document.createElement('div');
            newItem.className = 'changelog-item';
            newItem.innerHTML = `
                <input type="text" name="app_update[changelog][]" placeholder="Enter changelog item..." class="changelog-input">
                <button type="button" class="btn-small btn-remove" onclick="removeChangelogItem(this)">
                    Remove
                </button>
            `;
            container.appendChild(newItem);
        }

        function removeChangelogItem(button) {
            const items = document.querySelectorAll('.changelog-item');
            if (items.length > 1) {
                button.parentElement.remove();
            } else {
                alert('At least one changelog item is required');
            }
        }

        // Initialize the update creator
        document.addEventListener('DOMContentLoaded', () => {
            new UpdateCreator();
        });
    </script>
</body>
</html>