<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= form_authenticity_token %>">
    <title>SMS Messaging - GLT Logistics Admin</title>
    
    <!-- Favicon Links -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    
    <!-- Theme Color -->
    <meta name="theme-color" content="#8b5cf6">
    <meta name="msapplication-TileColor" content="#8b5cf6">
    
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: #0a0a0f;
            color: #e4e4e7;
            min-height: 100vh;
        }
        
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        
        .header {
            background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
            color: white;
            padding: 30px;
            border-radius: 20px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(139, 92, 246, 0.3);
        }
        
        .header h1 { font-size: 2rem; margin-bottom: 10px; font-weight: 700; }
        .header p { opacity: 0.9; margin-bottom: 20px; }
        
        .header-actions { display: flex; gap: 10px; flex-wrap: wrap; }
        
        .section {
            background: rgba(10, 10, 15, 0.8);
            border: 1px solid rgba(139, 92, 246, 0.2);
            padding: 30px;
            border-radius: 20px;
            margin-bottom: 20px;
            backdrop-filter: blur(20px);
        }
        
        .section h2 {
            margin-bottom: 20px;
            color: #f4f4f5;
            font-size: 1.5rem;
            font-weight: 700;
        }
        
        .form-group { margin-bottom: 25px; }
        
        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-weight: 600;
            color: #f4f4f5;
            font-size: 0.95rem;
        }
        
        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 14px;
            border: 2px solid rgba(139, 92, 246, 0.3);
            border-radius: 12px;
            background: rgba(10, 10, 15, 0.8);
            color: #e4e4e7;
            font-size: 1rem;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            transition: all 0.3s;
        }
        
        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #8b5cf6;
            box-shadow: 0 0 0 4px rgba(139, 92, 246, 0.2);
            background: rgba(10, 10, 15, 0.95);
        }
        
        .form-group input::placeholder,
        .form-group textarea::placeholder {
            color: #71717a;
        }
        
        .form-group small {
            display: block;
            margin-top: 8px;
            color: #a1a1aa;
            font-size: 0.875rem;
        }
        
        .btn {
            padding: 14px 28px;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            font-weight: 600;
            transition: all 0.3s;
            font-size: 1rem;
        }
        
        .btn-primary {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }
        
        .btn-primary:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
        
        .btn-success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }
        
        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(16, 185, 129, 0.3);
        }
        
        .btn-success:disabled {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn-full { width: 100%; }
        
        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin { to { transform: rotate(360deg); } }
        
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(10, 10, 15, 0.95);
            border: 1px solid rgba(139, 92, 246, 0.3);
            padding: 16px 20px;
            border-radius: 12px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
            display: flex;
            align-items: center;
            gap: 12px;
            visibility: hidden;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.3s;
            z-index: 1000;
            max-width: 400px;
            backdrop-filter: blur(20px);
        }
        
        .toast.show {
            visibility: visible;
            opacity: 1;
            transform: translateY(0);
        }
        
        .toast-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .toast-icon.success {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }
        
        .toast-icon.error {
            background: rgba(239, 68, 68, 0.2);
            color: #ef4444;
        }
        
        .toast-message {
            color: #e4e4e7;
            font-weight: 500;
        }
        
        .info-box {
            background: rgba(139, 92, 246, 0.1);
            padding: 25px;
            border-radius: 15px;
            border: 2px solid rgba(139, 92, 246, 0.3);
            margin-bottom: 25px;
        }
        
        .info-box h3 {
            color: #a78bfa;
            margin-bottom: 10px;
            font-weight: 600;
        }
        
        .info-box p {
            color: #d4d4d8;
            line-height: 1.6;
        }
        
        @media (max-width: 768px) {
            .header-actions { flex-direction: column; }
            .btn { width: 100%; text-align: center; }
        }
    </style>
</head>
<body>

    <div class="container">
        <div class="header">
            <h1>üì± SMS Messaging</h1>
            <p>Send test messages via Africa's Talking API</p>
            <div class="header-actions">
                <a href="<%= admin_root_path %>" class="btn btn-primary">‚Üê Back to Admin</a>
            </div>
        </div>

        <div class="info-box">
            <h3>‚ÑπÔ∏è About SMS Messaging</h3>
            <p>Use this interface to send test SMS messages through the Africa's Talking API. Enter a phone number with country code (e.g., +254712345678) and your message to test the SMS delivery system.</p>
        </div>

        <div class="section">
            <h2>üì® Send SMS Message</h2>
            
            <form id="smsForm">
                <div class="form-group">
                    <label for="phone_number">Phone Number</label>
                    <input 
                        type="tel" 
                        id="phone_number" 
                        name="phone_number" 
                        placeholder="+2547XXXXXXXX" 
                        required
                    >
                    <small>Include country code (e.g., +254 for Kenya, +256 for Uganda)</small>
                </div>

                <div class="form-group">
                    <label for="message">Message</label>
                    <textarea 
                        id="message" 
                        name="message" 
                        rows="5" 
                        required
                        placeholder="Enter your message here..."
                    >Hi üëã Glen, your package has been dropped at our agent and is being processed for delivery.</textarea>
                    <small>SMS messages are typically limited to 160 characters per segment</small>
                </div>

                <button type="submit" id="submitBtn" class="btn btn-success btn-full">
                    <span id="btnText">üì§ Send Message</span>
                    <span id="btnSpinner" style="display: none;">
                        <span class="spinner"></span>
                    </span>
                </button>
            </form>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast">
        <div id="toast-icon" class="toast-icon success">
            <!-- Icon will be set by JS -->
        </div>
        <div id="toast-message" class="toast-message">Message sent successfully.</div>
    </div>

    <script>
        const smsForm = document.getElementById('smsForm');
        const submitBtn = document.getElementById('submitBtn');
        const btnText = document.getElementById('btnText');
        const btnSpinner = document.getElementById('btnSpinner');
        const toast = document.getElementById('toast');
        const toastIcon = document.getElementById('toast-icon');
        const toastMessage = document.getElementById('toast-message');

        smsForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            // Show loading state
            btnText.style.display = 'none';
            btnSpinner.style.display = 'inline-block';
            submitBtn.disabled = true;

            const formData = new FormData(smsForm);
            const data = {
                phone_number: formData.get('phone_number'),
                message: formData.get('message'),
            };

            try {
                const response = await fetch('/admin/sms_messaging', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    showToast('success', result.message || 'SMS sent successfully!');
                    // Clear the phone number field on success
                    document.getElementById('phone_number').value = '';
                } else {
                    throw new Error(result.error || 'An unknown error occurred.');
                }

            } catch (error) {
                console.error('Error sending SMS:', error);
                showToast('error', error.message);
            } finally {
                // Restore button state
                btnText.style.display = 'inline';
                btnSpinner.style.display = 'none';
                submitBtn.disabled = false;
            }
        });

        function showToast(type, message) {
            // Reset classes
            toastIcon.innerHTML = '';
            toastIcon.className = 'toast-icon';

            if (type === 'success') {
                toastIcon.classList.add('success');
                toastIcon.innerHTML = `
                    <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>`;
            } else {
                toastIcon.classList.add('error');
                toastIcon.innerHTML = `
                    <svg width="20" height="20" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>`;
            }
            
            toastMessage.textContent = message;
            toast.classList.add('show');

            setTimeout(() => {
                toast.classList.remove('show');
            }, 5000);
        }
    </script>

</body>
</html>