<!-- app/views/public/packages/new.html.erb -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Package - GLT Logistics</title>
  
  <link rel="icon" type="image/x-icon" href="/favicon.ico">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <meta name="theme-color" content="#8b5cf6">
  
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: #0a0a0f;
      color: #e4e4e7;
      min-height: 100vh;
    }

    .animated-bg {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
      overflow: hidden;
    }

    .gradient-orb {
      position: absolute;
      border-radius: 50%;
      filter: blur(80px);
      opacity: 0.3;
      animation: float 20s ease-in-out infinite;
    }

    .orb-1 {
      width: 500px;
      height: 500px;
      background: radial-gradient(circle, #8b5cf6 0%, transparent 70%);
      top: -10%;
      left: -10%;
    }

    .orb-2 {
      width: 400px;
      height: 400px;
      background: radial-gradient(circle, #a78bfa 0%, transparent 70%);
      top: 50%;
      right: -10%;
      animation-delay: 7s;
    }

    @keyframes float {
      0%, 100% { transform: translate(0, 0) scale(1); }
      33% { transform: translate(50px, -50px) scale(1.1); }
      66% { transform: translate(-30px, 30px) scale(0.9); }
    }

    .container {
      position: relative;
      z-index: 1;
      max-width: 800px;
      margin: 0 auto;
      padding: 2rem;
    }

    .header {
      text-align: center;
      margin-bottom: 3rem;
    }

    .back-link {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      color: #8b5cf6;
      text-decoration: none;
      margin-bottom: 1.5rem;
      transition: color 0.3s;
    }

    .back-link:hover {
      color: #a78bfa;
    }

    .header-title {
      font-size: 2.5rem;
      font-weight: 800;
      background: linear-gradient(135deg, #ffffff 0%, #a78bfa 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 0.5rem;
    }

    .header-subtitle {
      font-size: 1.125rem;
      color: #a1a1aa;
    }

    .delivery-type-badge {
      display: inline-block;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-size: 0.875rem;
      font-weight: 600;
      margin-bottom: 1rem;
    }

    .delivery-type-badge.home { background: rgba(139, 92, 246, 0.2); color: #8b5cf6; }
    .delivery-type-badge.office { background: rgba(59, 130, 246, 0.2); color: #3b82f6; }
    .delivery-type-badge.fragile { background: rgba(249, 115, 22, 0.2); color: #f97316; }
    .delivery-type-badge.collection { background: rgba(16, 185, 129, 0.2); color: #10b981; }

    .form-card {
      background: rgba(26, 26, 46, 0.8);
      backdrop-filter: blur(20px);
      border-radius: 20px;
      border: 1px solid rgba(139, 92, 246, 0.2);
      padding: 2rem;
      margin-bottom: 2rem;
    }

    .form-section {
      margin-bottom: 2rem;
    }

    .form-section-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: #ffffff;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .form-row {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .form-group {
      margin-bottom: 1rem;
    }

    .form-label {
      display: block;
      font-size: 0.875rem;
      font-weight: 500;
      color: #a1a1aa;
      margin-bottom: 0.5rem;
    }

    .form-label.required::after {
      content: ' *';
      color: #ef4444;
    }

    .form-input,
    .form-select,
    .form-textarea {
      width: 100%;
      padding: 0.75rem 1rem;
      background: rgba(10, 10, 15, 0.6);
      border: 1px solid rgba(139, 92, 246, 0.3);
      border-radius: 8px;
      color: #ffffff;
      font-size: 1rem;
      transition: all 0.3s;
    }

    .form-input:focus,
    .form-select:focus,
    .form-textarea:focus {
      outline: none;
      border-color: #8b5cf6;
      box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
    }

    .form-textarea {
      min-height: 100px;
      resize: vertical;
    }

    .form-select {
      cursor: pointer;
    }

    .price-estimate {
      background: linear-gradient(135deg, rgba(139, 92, 246, 0.1) 0%, rgba(124, 58, 237, 0.1) 100%);
      border: 2px solid rgba(139, 92, 246, 0.3);
      border-radius: 16px;
      padding: 1.5rem;
      margin: 2rem 0;
    }

    .price-estimate-title {
      font-size: 1rem;
      font-weight: 600;
      color: #a78bfa;
      margin-bottom: 1rem;
    }

    .price-breakdown {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }

    .price-line {
      display: flex;
      justify-content: space-between;
      align-items: center;
      color: #a1a1aa;
      font-size: 0.875rem;
    }

    .price-total {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-top: 1rem;
      border-top: 1px solid rgba(139, 92, 246, 0.3);
      margin-top: 0.5rem;
    }

    .price-total-label {
      font-size: 1.125rem;
      font-weight: 600;
      color: #ffffff;
    }

    .price-total-value {
      font-size: 1.5rem;
      font-weight: 700;
      color: #8b5cf6;
    }

    .submit-btn {
      width: 100%;
      padding: 1rem 2rem;
      background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
      border: none;
      border-radius: 12px;
      color: #ffffff;
      font-size: 1.125rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      box-shadow: 0 4px 16px rgba(139, 92, 246, 0.4);
    }

    .submit-btn:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(139, 92, 246, 0.5);
    }

    .submit-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
      background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
    }

    .info-box {
      background: rgba(59, 130, 246, 0.1);
      border: 1px solid rgba(59, 130, 246, 0.3);
      border-radius: 8px;
      padding: 1rem;
      margin-top: 1rem;
      display: flex;
      gap: 0.75rem;
    }

    .info-box-icon {
      color: #3b82f6;
      flex-shrink: 0;
    }

    .info-box-text {
      color: #93c5fd;
      font-size: 0.875rem;
      line-height: 1.5;
    }

    .spinner {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: #ffffff;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .hidden {
      display: none;
    }

    @media (max-width: 768px) {
      .container {
        padding: 1rem;
      }

      .header-title {
        font-size: 2rem;
      }

      .form-card {
        padding: 1.5rem;
      }

      .form-row {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="animated-bg">
    <div class="gradient-orb orb-1"></div>
    <div class="gradient-orb orb-2"></div>
  </div>

  <div class="container">
    <div class="header">
      <a href="<%= public_home_path %>" class="back-link">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M19 12H5M12 19l-7-7 7-7"/>
        </svg>
        Back to Home
      </a>
      
      <div class="delivery-type-badge <%= @delivery_type %>">
        <%= @delivery_type.humanize %> Delivery
      </div>
      
      <h1 class="header-title">Create Package</h1>
      <p class="header-subtitle">Fill in the details for your <%= @delivery_type %> delivery</p>
    </div>

    <%= form_with model: @package, url: public_packages_path, method: :post, id: 'packageForm', html: { class: 'package-form' } do |f| %>
      <%= hidden_field_tag :delivery_type, @delivery_type %>
      
      <!-- Sender Information -->
      <div class="form-card">
        <div class="form-section">
          <h3 class="form-section-title">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
              <circle cx="12" cy="7" r="4"/>
            </svg>
            Sender Information
          </h3>
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label required">Sender Name</label>
              <%= f.text_field :sender_name, class: 'form-input', required: true %>
            </div>
            
            <div class="form-group">
              <label class="form-label required">Sender Phone</label>
              <%= f.text_field :sender_phone, class: 'form-input', required: true, pattern: '^\+?254[0-9]{9}$|^0[0-9]{9}$' %>
            </div>
          </div>
        </div>
      </div>

      <!-- Receiver Information -->
      <div class="form-card">
        <div class="form-section">
          <h3 class="form-section-title">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
              <circle cx="12" cy="7" r="4"/>
            </svg>
            Receiver Information
          </h3>
          
          <div class="form-row">
            <div class="form-group">
              <label class="form-label required">Receiver Name</label>
              <%= f.text_field :receiver_name, class: 'form-input', required: true %>
            </div>
            
            <div class="form-group">
              <label class="form-label required">Receiver Phone</label>
              <%= f.text_field :receiver_phone, class: 'form-input', required: true, pattern: '^\+?254[0-9]{9}$|^0[0-9]{9}$' %>
            </div>
          </div>
        </div>
      </div>

      <!-- Delivery Type Specific Fields -->
      <% if @delivery_type == 'home' %>
        <!-- Home Delivery: Origin Agent + Destination Location -->
        <div class="form-card">
          <div class="form-section">
            <h3 class="form-section-title">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                <polyline points="9 22 9 12 15 12 15 22"/>
              </svg>
              Pickup & Delivery Details
            </h3>
            
            <div class="form-group">
              <label class="form-label required">Pickup Location</label>
              <%= f.collection_select :origin_agent_id, 
                @form_data[:agents], 
                :id, 
                ->(agent) { "#{agent.name} - #{agent.area.name}, #{agent.area.location.name}" },
                { prompt: 'Select pickup location' },
                { class: 'form-select', required: true, id: 'origin_agent_select' }
              %>
            </div>

            <div class="form-group">
              <label class="form-label required">Delivery Location</label>
              <%= f.collection_select :destination_area_id, 
                @form_data[:areas], 
                :id, 
                ->(area) { "#{area.name} - #{area.location.name}" },
                { prompt: 'Select delivery location' },
                { class: 'form-select', required: true, id: 'destination_area_select' }
              %>
            </div>

            <div class="form-group">
              <label class="form-label required">Delivery Address</label>
              <%= f.text_area :delivery_location, class: 'form-textarea', rows: 3, required: true %>
            </div>
          </div>
        </div>

      <% elsif @delivery_type == 'office' %>
        <!-- Office Delivery: Agent to Agent Only -->
        <div class="form-card">
          <div class="form-section">
            <h3 class="form-section-title">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="2" y="7" width="20" height="14" rx="2" ry="2"/>
                <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"/>
              </svg>
              Transfer Details
            </h3>
            
            <div class="form-group">
              <label class="form-label required">From Location</label>
              <%= f.collection_select :origin_agent_id, 
                @form_data[:agents], 
                :id, 
                ->(agent) { "#{agent.name} - #{agent.area.name}, #{agent.area.location.name}" },
                { prompt: 'Select origin' },
                { class: 'form-select', required: true, id: 'origin_agent_select' }
              %>
            </div>

            <div class="form-group">
              <label class="form-label required">To Location</label>
              <%= f.collection_select :destination_agent_id, 
                @form_data[:agents], 
                :id, 
                ->(agent) { "#{agent.name} - #{agent.area.name}, #{agent.area.location.name}" },
                { prompt: 'Select destination' },
                { class: 'form-select', required: true, id: 'destination_agent_select' }
              %>
            </div>
          </div>
        </div>

      <% elsif @delivery_type == 'fragile' %>
        <!-- Fragile: Location-based pickup and delivery -->
        <div class="form-card">
          <div class="form-section">
            <h3 class="form-section-title">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
                <line x1="12" y1="9" x2="12" y2="13"/>
                <line x1="12" y1="17" x2="12.01" y2="17"/>
              </svg>
              Fragile Item Details
            </h3>
            
            <div class="form-group">
              <label class="form-label required">Pickup Location</label>
              <%= f.collection_select :origin_area_id, 
                @form_data[:areas], 
                :id, 
                ->(area) { "#{area.name} - #{area.location.name}" },
                { prompt: 'Select pickup location' },
                { class: 'form-select', required: true, id: 'origin_area_select' }
              %>
            </div>

            <div class="form-group">
              <label class="form-label required">Pickup Address</label>
              <%= f.text_area :pickup_location, class: 'form-textarea', rows: 2, required: true %>
            </div>

            <div class="form-group">
              <label class="form-label required">Delivery Location</label>
              <%= f.collection_select :destination_area_id, 
                @form_data[:areas], 
                :id, 
                ->(area) { "#{area.name} - #{area.location.name}" },
                { prompt: 'Select delivery location' },
                { class: 'form-select', required: true, id: 'destination_area_select' }
              %>
            </div>

            <div class="form-group">
              <label class="form-label required">Delivery Address</label>
              <%= f.text_area :delivery_location, class: 'form-textarea', rows: 2, required: true %>
            </div>
            
            <div class="form-group">
              <label class="form-label required">Item Description</label>
              <%= f.text_area :item_description, class: 'form-textarea', rows: 3, required: true %>
            </div>
            
            <div class="form-group">
              <label class="form-label">Estimated Value (KES)</label>
              <%= f.number_field :item_value, class: 'form-input', min: 0, step: '0.01' %>
            </div>
          </div>
        </div>

      <% elsif @delivery_type == 'collection' %>
        <!-- Collection: Location-based collection + delivery -->
        <div class="form-card">
          <div class="form-section">
            <h3 class="form-section-title">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"/>
                <line x1="3" y1="6" x2="21" y2="6"/>
                <path d="M16 10a4 4 0 0 1-8 0"/>
              </svg>
              Collection Details
            </h3>
            
            <div class="form-row">
              <div class="form-group">
                <label class="form-label required">Shop/Store Name</label>
                <%= f.text_field :shop_name, class: 'form-input', required: true %>
              </div>
              
              <div class="form-group">
                <label class="form-label">Shop Contact</label>
                <%= f.text_field :shop_contact, class: 'form-input' %>
              </div>
            </div>

            <div class="form-group">
              <label class="form-label required">Collection Location</label>
              <%= f.collection_select :origin_area_id, 
                @form_data[:areas], 
                :id, 
                ->(area) { "#{area.name} - #{area.location.name}" },
                { prompt: 'Select collection location' },
                { class: 'form-select', required: true, id: 'origin_area_select' }
              %>
            </div>
            
            <div class="form-group">
              <label class="form-label required">Collection Address</label>
              <%= f.text_area :collection_address, class: 'form-textarea', rows: 3, required: true %>
            </div>

            <div class="form-group">
              <label class="form-label required">Delivery Location</label>
              <%= f.collection_select :destination_area_id, 
                @form_data[:areas], 
                :id, 
                ->(area) { "#{area.name} - #{area.location.name}" },
                { prompt: 'Select delivery location' },
                { class: 'form-select', required: true, id: 'destination_area_select' }
              %>
            </div>

            <div class="form-group">
              <label class="form-label required">Delivery Address</label>
              <%= f.text_area :delivery_location, class: 'form-textarea', rows: 3, required: true %>
            </div>
            
            <div class="form-group">
              <label class="form-label required">Items to Collect</label>
              <%= f.text_area :items_to_collect, class: 'form-textarea', rows: 2, required: true %>
            </div>
            
            <div class="form-group">
              <label class="form-label required">Estimated Item Value (KES)</label>
              <%= f.number_field :item_value, class: 'form-input', min: 0, step: '0.01', required: true %>
            </div>
          </div>
        </div>
      <% end %>

      <!-- Package Details -->
      <div class="form-card">
        <div class="form-section">
          <h3 class="form-section-title">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/>
              <polyline points="3.27 6.96 12 12.01 20.73 6.96"/>
              <line x1="12" y1="22.08" x2="12" y2="12"/>
            </svg>
            Package Details
          </h3>
          
          <div class="form-group">
            <label class="form-label required">Package Size</label>
            <%= f.select :package_size, 
              options_for_select([['Small', 'small'], ['Medium', 'medium'], ['Large', 'large']], @package.package_size),
              {}, 
              { class: 'form-select', required: true, id: 'package_size_select' } 
            %>
          </div>
          
          <div class="form-group">
            <label class="form-label">Package Description</label>
            <%= f.text_area :package_description, class: 'form-textarea', rows: 2 %>
          </div>
          
          <div class="form-group">
            <label class="form-label">Special Instructions</label>
            <%= f.text_area :special_instructions, class: 'form-textarea', rows: 2 %>
          </div>
        </div>
      </div>

      <!-- Automatic Price Estimate -->
      <div class="price-estimate" id="priceEstimate">
        <h3 class="price-estimate-title">Delivery Cost</h3>
        
        <div id="priceLoading" class="hidden" style="text-align: center; padding: 1rem;">
          <div class="spinner"></div>
          <p style="margin-top: 0.5rem; color: #a1a1aa;">Calculating price...</p>
        </div>

        <div id="priceBreakdown">
          <div class="price-total">
            <span class="price-total-label">Total Cost</span>
            <span class="price-total-value" id="totalCost">KES 0</span>
          </div>
        </div>

        <div id="priceError" class="hidden" style="color: #ef4444; font-size: 0.875rem; margin-top: 1rem;">
          Select all locations to calculate pricing
        </div>
      </div>

      <!-- Submit Button -->
      <button type="submit" class="submit-btn" id="submitBtn" disabled>
        <span id="submitText">Complete all required fields (*) to proceed</span>
        <span id="submitSpinner" class="spinner hidden"></span>
      </button>
    <% end %>
  </div>

  <%= render 'public/packages/payment_modal' %>

  <script>
    const form = document.getElementById('packageForm');
    const submitBtn = document.getElementById('submitBtn');
    const submitText = document.getElementById('submitText');
    const deliveryType = '<%= @delivery_type %>';
    
    let estimatedCost = 0;
    let calculationTimeout = null;

    // Elements that trigger price calculation
    const priceInputs = [
      document.getElementById('origin_area_select'),
      document.getElementById('destination_area_select'),
      document.getElementById('origin_agent_select'),
      document.getElementById('destination_agent_select'),
      document.getElementById('package_size_select')
    ].filter(el => el !== null);

    console.log('🚀 Price calculation initialized');
    console.log('📦 Delivery Type:', deliveryType);
    console.log('🎯 Watching inputs:', priceInputs.map(el => el.id));

    // Debounced calculation to prevent rapid-fire requests
    function triggerCalculation() {
      if (calculationTimeout) {
        clearTimeout(calculationTimeout);
      }
      calculationTimeout = setTimeout(() => {
        console.log('⏰ Debounce completed, calculating...');
        calculatePricing();
      }, 300);
    }

    // Attach event listeners with immediate feedback
    priceInputs.forEach(input => {
      if (input) {
        input.addEventListener('change', function(e) {
          console.log(`🔄 Field changed: ${e.target.id} = ${e.target.value}`);
          triggerCalculation();
        });
      }
    });

    async function calculatePricing() {
      const priceLoading = document.getElementById('priceLoading');
      const priceBreakdown = document.getElementById('priceBreakdown');
      const priceError = document.getElementById('priceError');
      const totalCostEl = document.getElementById('totalCost');

      console.log('\n═══ STARTING PRICE CALCULATION ═══');
      console.log('Delivery Type:', deliveryType);

      const formData = new FormData(form);
      let originAreaId, destinationAreaId;

      // Determine origin and destination based on delivery type
      if (deliveryType === 'home') {
        const originAgentId = formData.get('package[origin_agent_id]');
        destinationAreaId = formData.get('package[destination_area_id]');
        
        console.log('📍 Home Delivery');
        console.log('  → Origin Agent ID:', originAgentId);
        console.log('  → Destination Area ID:', destinationAreaId);
        
        if (!originAgentId || !destinationAreaId) {
          console.log('⚠️  Missing required fields');
          priceError.textContent = 'Select pickup and delivery locations';
          priceError.classList.remove('hidden');
          priceBreakdown.classList.add('hidden');
          updateSubmitButton(false);
          return;
        }

        console.log('🔍 Fetching agent area...');
        originAreaId = await getAgentArea(originAgentId);
        console.log('✓ Retrieved origin area ID:', originAreaId);
        
        if (!originAreaId) {
          console.error('❌ Failed to retrieve origin area');
          priceError.textContent = 'Failed to get location data. Please refresh and try again.';
          priceError.classList.remove('hidden');
          priceBreakdown.classList.add('hidden');
          updateSubmitButton(false);
          return;
        }
        
      } else if (deliveryType === 'office') {
        const originAgentId = formData.get('package[origin_agent_id]');
        const destAgentId = formData.get('package[destination_agent_id]');
        
        console.log('🏢 Office Delivery');
        console.log('  → Origin Agent ID:', originAgentId);
        console.log('  → Destination Agent ID:', destAgentId);
        
        if (!originAgentId || !destAgentId) {
          console.log('⚠️  Missing required fields');
          priceError.textContent = 'Select both origin and destination';
          priceError.classList.remove('hidden');
          priceBreakdown.classList.add('hidden');
          updateSubmitButton(false);
          return;
        }

        console.log('🔍 Fetching agent areas...');
        originAreaId = await getAgentArea(originAgentId);
        destinationAreaId = await getAgentArea(destAgentId);
        console.log('✓ Origin area ID:', originAreaId);
        console.log('✓ Destination area ID:', destinationAreaId);
        
        if (!originAreaId || !destinationAreaId) {
          console.error('❌ Failed to retrieve agent areas');
          priceError.textContent = 'Failed to get location data. Please refresh and try again.';
          priceError.classList.remove('hidden');
          priceBreakdown.classList.add('hidden');
          updateSubmitButton(false);
          return;
        }
        
      } else {
        // Fragile and Collection use area selectors
        originAreaId = formData.get('package[origin_area_id]');
        destinationAreaId = formData.get('package[destination_area_id]');
        
        console.log('📦 Area-based Delivery');
        console.log('  → Origin Area ID:', originAreaId);
        console.log('  → Destination Area ID:', destinationAreaId);
        
        if (!originAreaId || !destinationAreaId) {
          console.log('⚠️  Missing required fields');
          priceError.textContent = 'Select pickup and delivery locations';
          priceError.classList.remove('hidden');
          priceBreakdown.classList.add('hidden');
          updateSubmitButton(false);
          return;
        }
      }

      const packageSize = formData.get('package[package_size]');
      console.log('📏 Package size:', packageSize);
      
      if (!packageSize) {
        console.log('⚠️  Missing package size');
        priceError.textContent = 'Select a package size';
        priceError.classList.remove('hidden');
        priceBreakdown.classList.add('hidden');
        updateSubmitButton(false);
        return;
      }

      // Show loading
      priceLoading.classList.remove('hidden');
      priceBreakdown.classList.add('hidden');
      priceError.classList.add('hidden');

      const requestPayload = {
        delivery_type: deliveryType,
        package_size: packageSize,
        origin_area_id: originAreaId,
        destination_area_id: destinationAreaId
      };

      console.log('📤 Sending pricing request:', requestPayload);

      try {
        // Get CSRF token if it exists
        const csrfToken = document.querySelector('[name="csrf-token"]');
        const headers = {
          'Content-Type': 'application/json'
        };
        if (csrfToken) {
          headers['X-CSRF-Token'] = csrfToken.content;
        }
        
        const response = await fetch('<%= calculate_pricing_public_packages_path %>', {
          method: 'POST',
          headers: headers,
          body: JSON.stringify(requestPayload)
        });

        console.log('📥 Response status:', response.status);
        const result = await response.json();
        console.log('📥 Response data:', result);

        if (result.success) {
          estimatedCost = result.data.total_cost;
          console.log('✅ Price calculated:', estimatedCost, 'KES');
          totalCostEl.textContent = `KES ${estimatedCost.toLocaleString()}`;
          
          priceBreakdown.classList.remove('hidden');
          priceError.classList.add('hidden');
          updateSubmitButton(true);
        } else {
          console.error('❌ Pricing failed:', result.message);
          priceError.textContent = result.message || 'Unable to calculate price';
          priceError.classList.remove('hidden');
          priceBreakdown.classList.add('hidden');
          updateSubmitButton(false);
        }
      } catch (error) {
        console.error('❌ Request error:', error);
        priceError.textContent = 'Network error. Please check your connection.';
        priceError.classList.remove('hidden');
        priceBreakdown.classList.add('hidden');
        updateSubmitButton(false);
      } finally {
        priceLoading.classList.add('hidden');
        console.log('═══ CALCULATION COMPLETE ═══\n');
      }
    }

    async function getAgentArea(agentId) {
      try {
        console.log('  🔄 Fetching area for agent:', agentId);
        const url = `/public/agents/${agentId}/area`;
        
        // Get CSRF token if it exists
        const csrfToken = document.querySelector('[name="csrf-token"]');
        const headers = {};
        if (csrfToken) {
          headers['X-CSRF-Token'] = csrfToken.content;
        }
        
        const response = await fetch(url, { headers });
        
        console.log('  📡 Agent area response:', response.status);
        
        if (!response.ok) {
          console.error('  ❌ HTTP error:', response.status);
          return null;
        }
        
        const result = await response.json();
        console.log('  📦 Agent area data:', result);
        
        if (result.success) {
          console.log('  ✅ Area ID retrieved:', result.area_id);
          return result.area_id;
        } else {
          console.error('  ❌ Request failed:', result.message);
          return null;
        }
      } catch (error) {
        console.error('  ❌ Error:', error);
        return null;
      }
    }

    function updateSubmitButton(enablePayment) {
      if (enablePayment && estimatedCost > 0) {
        submitBtn.disabled = false;
        submitText.textContent = 'Proceed to Payment';
      } else {
        submitBtn.disabled = true;
        submitText.textContent = 'Complete all required fields (*) to proceed';
      }
    }

    // Form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const submitSpinner = document.getElementById('submitSpinner');
      
      if (estimatedCost === 0) {
        alert('Please wait for pricing calculation');
        return;
      }
      
      submitText.textContent = 'Processing...';
      submitSpinner.classList.remove('hidden');
      submitBtn.disabled = true;
      
      const formData = new FormData(form);
      const senderPhone = formData.get('package[sender_phone]');
      
      showPaymentModal(senderPhone, estimatedCost, formData);
    });

    function showPaymentModal(phoneNumber, amount, packageData) {
      const modal = document.getElementById('paymentModal');
      document.getElementById('paymentPhone').value = phoneNumber;
      document.getElementById('paymentAmount').textContent = amount;
      modal.style.display = 'flex';
      
      window.pendingPackageData = packageData;
    }

    console.log('✅ Form initialization complete');
  </script>
</body>
</html>